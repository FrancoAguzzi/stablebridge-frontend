"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./utils/index.ts":
/*!************************!*\
  !*** ./utils/index.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"InjectedConnect\": function() { return /* binding */ InjectedConnect; },\n/* harmony export */   \"approveSbrl\": function() { return /* binding */ approveSbrl; },\n/* harmony export */   \"formatAddress\": function() { return /* binding */ formatAddress; },\n/* harmony export */   \"getEstimatedGasFee\": function() { return /* binding */ getEstimatedGasFee; },\n/* harmony export */   \"getRpcUrl\": function() { return /* binding */ getRpcUrl; },\n/* harmony export */   \"getSBRLAmount\": function() { return /* binding */ getSBRLAmount; },\n/* harmony export */   \"stakeAmount\": function() { return /* binding */ stakeAmount; },\n/* harmony export */   \"switchNetwork\": function() { return /* binding */ switchNetwork; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _abi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abi */ \"./utils/abi.ts\");\n/* harmony import */ var _constants_supportedChains__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants/supportedChains */ \"./constants/supportedChains.ts\");\n/* harmony import */ var _constants_networks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants/networks */ \"./constants/networks.ts\");\n/* harmony import */ var _web3_react_injected_connector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @web3-react/injected-connector */ \"./node_modules/@web3-react/injected-connector/dist/injected-connector.esm.js\");\n/* harmony import */ var _constants_chainInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants/chainInfo */ \"./constants/chainInfo.ts\");\n\n\n\n\n\n\nconst STAKE_CONTRACT_ADDRESS = \"0xb5eE0C18eEB5745aa84a593b247bb627f147fc0a\";\nconst InjectedConnect = new _web3_react_injected_connector__WEBPACK_IMPORTED_MODULE_3__.InjectedConnector({\n    supportedChainIds: [\n        1,\n        3,\n        137,\n        80001\n    ]\n});\nconst formatAddress = (str)=>{\n    const initialDigits = str.substring(0, 6);\n    const middleDigits = \"....\";\n    const lastDigits = str.substring(str.length - 5, str.length - 1);\n    return initialDigits + middleDigits + lastDigits;\n};\nconst switchNetwork = async (chainId)=>{\n    if (chainId) {\n        const chainIdInHex = ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.utils.hexValue(chainId);\n        try {\n            await window.ethereum.request({\n                method: \"wallet_switchEthereumChain\",\n                params: [\n                    {\n                        chainId: chainIdInHex\n                    }\n                ]\n            });\n        } catch (e) {\n            // This error code indicates the chain was not added to the wallet yet\n            if (e.code === 4902) {\n                try {\n                    const chainInfo = _constants_supportedChains__WEBPACK_IMPORTED_MODULE_1__.supportedChains.find((chain)=>{\n                        return chain.chainId === chainId;\n                    });\n                    if (chainInfo) {\n                        await window.ethereum.request({\n                            method: \"wallet_addEthereumChain\",\n                            params: [\n                                {\n                                    chainId: chainIdInHex,\n                                    chainName: chainInfo.nativeCurrency.name,\n                                    rpcUrls: [\n                                        getRpcUrl(chainId)\n                                    ]\n                                }\n                            ]\n                        });\n                    } else {\n                        return {\n                            error: \"Not supported chain\"\n                        };\n                    }\n                } catch (error) {\n                    return {\n                        error\n                    };\n                }\n            }\n        }\n    }\n};\n// export const connectWallet = async () => {\n//   const { activate, deactivate } = useWeb3React();\n//   activate(Injected);\n//   // await window.ethereum.enable();\n//   // const provider = new ethers.providers.Web3Provider(window.ethereum);\n//   // let accounts = await provider.send(\"eth_requestAccounts\", []);\n//   // let account = accounts[0];\n//   // provider.on(\"accountsChanged\", function (accounts) {\n//   //   account = accounts[0];\n//   // });\n//   changeNetwork(SupportedChainId.MAINNET);\n// };\nconst stakeAmount = async (amount)=>{\n    try {\n        const ethereum = window.ethereum;\n        const accounts = await ethereum.request({\n            method: \"eth_requestAccounts\"\n        });\n        const walletAddress = accounts[0];\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.providers.Web3Provider(window.ethereum);\n        const signer = await provider.getSigner(walletAddress);\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_5__.Contract(STAKE_CONTRACT_ADDRESS, _abi__WEBPACK_IMPORTED_MODULE_0__.stakeContractAbi, signer);\n        approveSbrl(250, amount);\n        const result = await contract.stake(amount * 10e18);\n        return result;\n    } catch (e) {\n        return e;\n    }\n};\nconst approveSbrl = async (chainId, amount)=>{\n    if (chainId) {\n        const ethereum = window.ethereum;\n        const accounts = await ethereum.request({\n            method: \"eth_requestAccounts\"\n        });\n        try {\n            var ref;\n            const walletAddress = accounts[0];\n            const address = (ref = (0,_constants_chainInfo__WEBPACK_IMPORTED_MODULE_4__.getChainInfo)(chainId)) === null || ref === void 0 ? void 0 : ref.stableBridgeContractAddress;\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.providers.Web3Provider(window.ethereum);\n            const signer = await provider.getSigner(walletAddress);\n            const contract = new ethers__WEBPACK_IMPORTED_MODULE_5__.Contract(address, _abi__WEBPACK_IMPORTED_MODULE_0__.sbrlAbi, signer);\n            const approve = await contract.approve(STAKE_CONTRACT_ADDRESS, amount);\n            return approve;\n        } catch (e) {\n            console.error(e);\n            return \"Failed to approve\";\n        }\n    }\n};\nconst getSBRLAmount = async (chainId)=>{\n    if (chainId) {\n        const ethereum = window.ethereum;\n        const accounts = await ethereum.request({\n            method: \"eth_requestAccounts\"\n        });\n        try {\n            var ref;\n            const walletAddress = accounts[0];\n            const address = (ref = (0,_constants_chainInfo__WEBPACK_IMPORTED_MODULE_4__.getChainInfo)(chainId)) === null || ref === void 0 ? void 0 : ref.stableBridgeContractAddress;\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.providers.Web3Provider(window.ethereum);\n            const signer = await provider.getSigner(walletAddress);\n            const contract = new ethers__WEBPACK_IMPORTED_MODULE_5__.Contract(address, _abi__WEBPACK_IMPORTED_MODULE_0__.sbrlAbi, signer);\n            const balance = await contract.balanceOf(walletAddress);\n            const balanceFormatted = ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.utils.formatUnits(balance, 6);\n            return balanceFormatted;\n        } catch (e) {\n            console.error(e);\n            return null;\n        }\n    }\n};\n// export const listenToPayment = async () => {\n//   setInterval(async () => {\n//     const myHeaders = new Headers();\n//     myHeaders.append(\"Content-Type\", \"application/json\");\n//     const res = await fetch(`${import.meta.env.VITE_PIX_API}/verify-pix`, {\n//       method: \"POST\",\n//       headers: myHeaders,\n//       body: JSON.stringify({\n//         id: store.getters.getPixData.id,\n//       }),\n//     });\n//     const data = await res.json();\n//     if (data.approved) {\n//       clearInterval;\n//       router.push({\n//         path: \"/\",\n//         query: {\n//           message: `Successfully added SBRL via PIX to your wallet.`,\n//         },\n//       });\n//     }\n//   }, 5000);\n// };\n// export const listenBalance = () => {\n//   setInterval(() => {\n//     updateBalance();\n//   }, 10000);\n// };\nconst getRpcUrl = (chainId)=>{\n    switch(chainId){\n        case _constants_supportedChains__WEBPACK_IMPORTED_MODULE_1__.SupportedChainId.ARBITRUM_ONE:\n        case _constants_supportedChains__WEBPACK_IMPORTED_MODULE_1__.SupportedChainId.FANTOM:\n        case _constants_supportedChains__WEBPACK_IMPORTED_MODULE_1__.SupportedChainId.GOERLI:\n        case _constants_supportedChains__WEBPACK_IMPORTED_MODULE_1__.SupportedChainId.POLYGON:\n        case _constants_supportedChains__WEBPACK_IMPORTED_MODULE_1__.SupportedChainId.POLYGON_MUMBAI:\n            return _constants_networks__WEBPACK_IMPORTED_MODULE_2__.RPC_URLS[chainId][0];\n        default:\n            return _constants_networks__WEBPACK_IMPORTED_MODULE_2__.FALLBACK_URLS[chainId][0];\n    }\n};\nconst getEstimatedGasFee = async (chainId, tokenId, amount)=>{\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    const res = await fetch(\"\".concat(\"\", \"/estimated-gas\"), {\n        method: \"POST\",\n        headers: myHeaders,\n        body: JSON.stringify({\n            networkId: chainId,\n            token: tokenId,\n            amount: amount\n        })\n    });\n    const data = await res.json();\n    return data;\n}; // export const doBridge = async (\n //   toAddress: string,\n //   amount: string,\n //   chainId: number\n // ) => {\n //   const ethereum = (window as any).ethereum;\n //   const accounts = await ethereum.request({\n //     method: \"eth_requestAccounts\",\n //   });\n //   const contractAddress = store.getters.getContractAddress;\n //   const provider = new ethers.providers.Web3Provider(ethereum);\n //   const walletAddress = accounts[0]; // first account in MetaMask\n //   const signer = provider.getSigner(walletAddress);\n //   const contract = new ethers.Contract(contractAddress, sbrlAbi, signer);\n //   const numberOfDecimals = 6;\n //   const numberOfTokens = ethers.utils.parseUnits(amount, numberOfDecimals);\n //   const tx = await contract.burnToBridge(numberOfTokens, toAddress, chainId, {\n //     gasLimit: 3000000,\n //     gasPrice: ethers.utils.parseUnits(\"50\", \"gwei\"),\n //   });\n //   console.log(tx);\n // };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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UjtRQUNUUyxNQUFNQyxLQUFLQyxTQUFTLENBQUM7WUFDbkJDLFdBQVc3RDtZQUNYOEQsT0FBT2Q7WUFDUDNCLFFBQVFBO1FBQ1Y7SUFDRjtJQUVGLE1BQU0wQyxPQUFPLE1BQU1YLElBQUlZLElBQUk7SUFFM0IsT0FBT0Q7QUFDVCxFQUFFLENBQ0Ysa0NBQWtDO0NBQ2xDLHVCQUF1QjtDQUN2QixvQkFBb0I7Q0FDcEIsb0JBQW9CO0NBQ3BCLFNBQVM7Q0FDVCwrQ0FBK0M7Q0FDL0MsOENBQThDO0NBQzlDLHFDQUFxQztDQUNyQyxRQUFRO0NBRVIsOERBQThEO0NBQzlELGtFQUFrRTtDQUNsRSxvRUFBb0U7Q0FDcEUsc0RBQXNEO0NBQ3RELDRFQUE0RTtDQUU1RSxnQ0FBZ0M7Q0FDaEMsOEVBQThFO0NBRTlFLGlGQUFpRjtDQUNqRix5QkFBeUI7Q0FDekIsdURBQXVEO0NBQ3ZELFFBQVE7Q0FDUixxQkFBcUI7Q0FDckIsS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi91dGlscy9pbmRleC50cz81NmQ3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRyYWN0LCBldGhlcnMsIFNpZ25lciB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB7IHNicmxBYmksIHN0YWtlQ29udHJhY3RBYmkgfSBmcm9tIFwiLi9hYmlcIjtcbmltcG9ydCB7XG4gIENoYWluVHlwZSxcbiAgU3VwcG9ydGVkQ2hhaW5JZCxcbiAgc3VwcG9ydGVkQ2hhaW5zLFxufSBmcm9tIFwiLi4vY29uc3RhbnRzL3N1cHBvcnRlZENoYWluc1wiO1xuaW1wb3J0IHsgRkFMTEJBQ0tfVVJMUywgUlBDX1VSTFMgfSBmcm9tIFwiLi4vY29uc3RhbnRzL25ldHdvcmtzXCI7XG5pbXBvcnQgeyBJbmplY3RlZENvbm5lY3RvciB9IGZyb20gXCJAd2ViMy1yZWFjdC9pbmplY3RlZC1jb25uZWN0b3JcIjtcbmltcG9ydCB7IGdldENoYWluSW5mbyB9IGZyb20gXCIuLi9jb25zdGFudHMvY2hhaW5JbmZvXCI7XG5cbmNvbnN0IFNUQUtFX0NPTlRSQUNUX0FERFJFU1MgPSBcIjB4YjVlRTBDMThlRUI1NzQ1YWE4NGE1OTNiMjQ3YmI2MjdmMTQ3ZmMwYVwiO1xuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICBldGhlcmV1bT86IGFueTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgSW5qZWN0ZWRDb25uZWN0ID0gbmV3IEluamVjdGVkQ29ubmVjdG9yKHtcbiAgc3VwcG9ydGVkQ2hhaW5JZHM6IFsxLCAzLCAxMzcsIDgwMDAxXSxcbn0pO1xuXG5leHBvcnQgY29uc3QgZm9ybWF0QWRkcmVzcyA9IChzdHI6IHN0cmluZykgPT4ge1xuICBjb25zdCBpbml0aWFsRGlnaXRzID0gc3RyLnN1YnN0cmluZygwLCA2KTtcbiAgY29uc3QgbWlkZGxlRGlnaXRzID0gXCIuLi4uXCI7XG4gIGNvbnN0IGxhc3REaWdpdHMgPSBzdHIuc3Vic3RyaW5nKHN0ci5sZW5ndGggLSA1LCBzdHIubGVuZ3RoIC0gMSk7XG4gIHJldHVybiBpbml0aWFsRGlnaXRzICsgbWlkZGxlRGlnaXRzICsgbGFzdERpZ2l0cztcbn07XG5cbmV4cG9ydCBjb25zdCBzd2l0Y2hOZXR3b3JrID0gYXN5bmMgKGNoYWluSWQ6IG51bWJlcikgPT4ge1xuICBpZiAoY2hhaW5JZCkge1xuICAgIGNvbnN0IGNoYWluSWRJbkhleCA9IGV0aGVycy51dGlscy5oZXhWYWx1ZShjaGFpbklkKTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB3aW5kb3cuZXRoZXJldW0ucmVxdWVzdCh7XG4gICAgICAgIG1ldGhvZDogXCJ3YWxsZXRfc3dpdGNoRXRoZXJldW1DaGFpblwiLFxuICAgICAgICBwYXJhbXM6IFt7IGNoYWluSWQ6IGNoYWluSWRJbkhleCB9XSxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgLy8gVGhpcyBlcnJvciBjb2RlIGluZGljYXRlcyB0aGUgY2hhaW4gd2FzIG5vdCBhZGRlZCB0byB0aGUgd2FsbGV0IHlldFxuICAgICAgaWYgKGUuY29kZSA9PT0gNDkwMikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGNoYWluSW5mbyA9IHN1cHBvcnRlZENoYWlucy5maW5kKChjaGFpbjogQ2hhaW5UeXBlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY2hhaW4uY2hhaW5JZCA9PT0gY2hhaW5JZDtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChjaGFpbkluZm8pIHtcbiAgICAgICAgICAgIGF3YWl0IHdpbmRvdy5ldGhlcmV1bS5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgbWV0aG9kOiBcIndhbGxldF9hZGRFdGhlcmV1bUNoYWluXCIsXG4gICAgICAgICAgICAgIHBhcmFtczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGNoYWluSWQ6IGNoYWluSWRJbkhleCxcbiAgICAgICAgICAgICAgICAgIGNoYWluTmFtZTogY2hhaW5JbmZvLm5hdGl2ZUN1cnJlbmN5Lm5hbWUsXG4gICAgICAgICAgICAgICAgICBycGNVcmxzOiBbZ2V0UnBjVXJsKGNoYWluSWQpXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7IGVycm9yOiBcIk5vdCBzdXBwb3J0ZWQgY2hhaW5cIiB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4geyBlcnJvciB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vLyBleHBvcnQgY29uc3QgY29ubmVjdFdhbGxldCA9IGFzeW5jICgpID0+IHtcbi8vICAgY29uc3QgeyBhY3RpdmF0ZSwgZGVhY3RpdmF0ZSB9ID0gdXNlV2ViM1JlYWN0KCk7XG5cbi8vICAgYWN0aXZhdGUoSW5qZWN0ZWQpO1xuXG4vLyAgIC8vIGF3YWl0IHdpbmRvdy5ldGhlcmV1bS5lbmFibGUoKTtcbi8vICAgLy8gY29uc3QgcHJvdmlkZXIgPSBuZXcgZXRoZXJzLnByb3ZpZGVycy5XZWIzUHJvdmlkZXIod2luZG93LmV0aGVyZXVtKTtcblxuLy8gICAvLyBsZXQgYWNjb3VudHMgPSBhd2FpdCBwcm92aWRlci5zZW5kKFwiZXRoX3JlcXVlc3RBY2NvdW50c1wiLCBbXSk7XG4vLyAgIC8vIGxldCBhY2NvdW50ID0gYWNjb3VudHNbMF07XG4vLyAgIC8vIHByb3ZpZGVyLm9uKFwiYWNjb3VudHNDaGFuZ2VkXCIsIGZ1bmN0aW9uIChhY2NvdW50cykge1xuLy8gICAvLyAgIGFjY291bnQgPSBhY2NvdW50c1swXTtcbi8vICAgLy8gfSk7XG5cbi8vICAgY2hhbmdlTmV0d29yayhTdXBwb3J0ZWRDaGFpbklkLk1BSU5ORVQpO1xuLy8gfTtcblxuZXhwb3J0IGNvbnN0IHN0YWtlQW1vdW50ID0gYXN5bmMgKGFtb3VudDogbnVtYmVyKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgZXRoZXJldW0gPSAod2luZG93IGFzIGFueSkuZXRoZXJldW07XG4gICAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCBldGhlcmV1bS5yZXF1ZXN0KHtcbiAgICAgIG1ldGhvZDogXCJldGhfcmVxdWVzdEFjY291bnRzXCIsXG4gICAgfSk7XG5cbiAgICBjb25zdCB3YWxsZXRBZGRyZXNzID0gYWNjb3VudHNbMF07XG5cbiAgICBjb25zdCBwcm92aWRlciA9IG5ldyBldGhlcnMucHJvdmlkZXJzLldlYjNQcm92aWRlcih3aW5kb3cuZXRoZXJldW0pO1xuICAgIGNvbnN0IHNpZ25lciA9IGF3YWl0IHByb3ZpZGVyLmdldFNpZ25lcih3YWxsZXRBZGRyZXNzKTtcblxuICAgIGNvbnN0IGNvbnRyYWN0ID0gbmV3IENvbnRyYWN0KFxuICAgICAgU1RBS0VfQ09OVFJBQ1RfQUREUkVTUyxcbiAgICAgIHN0YWtlQ29udHJhY3RBYmksXG4gICAgICBzaWduZXJcbiAgICApO1xuXG4gICAgYXBwcm92ZVNicmwoMjUwLCBhbW91bnQpO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udHJhY3Quc3Rha2UoYW1vdW50ICogMTBlMTgpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBlO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgYXBwcm92ZVNicmwgPSBhc3luYyAoXG4gIGNoYWluSWQ6IG51bWJlciB8IHVuZGVmaW5lZCxcbiAgYW1vdW50OiBudW1iZXJcbikgPT4ge1xuICBpZiAoY2hhaW5JZCkge1xuICAgIGNvbnN0IGV0aGVyZXVtID0gKHdpbmRvdyBhcyBhbnkpLmV0aGVyZXVtO1xuICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgZXRoZXJldW0ucmVxdWVzdCh7XG4gICAgICBtZXRob2Q6IFwiZXRoX3JlcXVlc3RBY2NvdW50c1wiLFxuICAgIH0pO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB3YWxsZXRBZGRyZXNzID0gYWNjb3VudHNbMF07XG4gICAgICBjb25zdCBhZGRyZXNzID0gZ2V0Q2hhaW5JbmZvKGNoYWluSWQpPy5zdGFibGVCcmlkZ2VDb250cmFjdEFkZHJlc3M7XG4gICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBldGhlcnMucHJvdmlkZXJzLldlYjNQcm92aWRlcih3aW5kb3cuZXRoZXJldW0pO1xuICAgICAgY29uc3Qgc2lnbmVyID0gYXdhaXQgcHJvdmlkZXIuZ2V0U2lnbmVyKHdhbGxldEFkZHJlc3MpO1xuICAgICAgY29uc3QgY29udHJhY3QgPSBuZXcgQ29udHJhY3QoYWRkcmVzcywgc2JybEFiaSwgc2lnbmVyKTtcblxuICAgICAgY29uc3QgYXBwcm92ZSA9IGF3YWl0IGNvbnRyYWN0LmFwcHJvdmUoU1RBS0VfQ09OVFJBQ1RfQUREUkVTUywgYW1vdW50KTtcblxuICAgICAgcmV0dXJuIGFwcHJvdmU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgIHJldHVybiBcIkZhaWxlZCB0byBhcHByb3ZlXCI7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U0JSTEFtb3VudCA9IGFzeW5jIChjaGFpbklkOiBudW1iZXIgfCB1bmRlZmluZWQpID0+IHtcbiAgaWYgKGNoYWluSWQpIHtcbiAgICBjb25zdCBldGhlcmV1bSA9ICh3aW5kb3cgYXMgYW55KS5ldGhlcmV1bTtcbiAgICBjb25zdCBhY2NvdW50cyA9IGF3YWl0IGV0aGVyZXVtLnJlcXVlc3Qoe1xuICAgICAgbWV0aG9kOiBcImV0aF9yZXF1ZXN0QWNjb3VudHNcIixcbiAgICB9KTtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgd2FsbGV0QWRkcmVzcyA9IGFjY291bnRzWzBdO1xuICAgICAgY29uc3QgYWRkcmVzcyA9IGdldENoYWluSW5mbyhjaGFpbklkKT8uc3RhYmxlQnJpZGdlQ29udHJhY3RBZGRyZXNzO1xuICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgZXRoZXJzLnByb3ZpZGVycy5XZWIzUHJvdmlkZXIod2luZG93LmV0aGVyZXVtKTtcbiAgICAgIGNvbnN0IHNpZ25lciA9IGF3YWl0IHByb3ZpZGVyLmdldFNpZ25lcih3YWxsZXRBZGRyZXNzKTtcbiAgICAgIGNvbnN0IGNvbnRyYWN0ID0gbmV3IENvbnRyYWN0KGFkZHJlc3MsIHNicmxBYmksIHNpZ25lcik7XG5cbiAgICAgIGNvbnN0IGJhbGFuY2UgPSBhd2FpdCBjb250cmFjdC5iYWxhbmNlT2Yod2FsbGV0QWRkcmVzcyk7XG4gICAgICBjb25zdCBiYWxhbmNlRm9ybWF0dGVkID0gZXRoZXJzLnV0aWxzLmZvcm1hdFVuaXRzKGJhbGFuY2UsIDYpO1xuXG4gICAgICByZXR1cm4gYmFsYW5jZUZvcm1hdHRlZDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59O1xuXG4vLyBleHBvcnQgY29uc3QgbGlzdGVuVG9QYXltZW50ID0gYXN5bmMgKCkgPT4ge1xuLy8gICBzZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7XG4vLyAgICAgY29uc3QgbXlIZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcblxuLy8gICAgIG15SGVhZGVycy5hcHBlbmQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuXG4vLyAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7aW1wb3J0Lm1ldGEuZW52LlZJVEVfUElYX0FQSX0vdmVyaWZ5LXBpeGAsIHtcbi8vICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4vLyAgICAgICBoZWFkZXJzOiBteUhlYWRlcnMsXG4vLyAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4vLyAgICAgICAgIGlkOiBzdG9yZS5nZXR0ZXJzLmdldFBpeERhdGEuaWQsXG4vLyAgICAgICB9KSxcbi8vICAgICB9KTtcbi8vICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcblxuLy8gICAgIGlmIChkYXRhLmFwcHJvdmVkKSB7XG4vLyAgICAgICBjbGVhckludGVydmFsO1xuLy8gICAgICAgcm91dGVyLnB1c2goe1xuLy8gICAgICAgICBwYXRoOiBcIi9cIixcbi8vICAgICAgICAgcXVlcnk6IHtcbi8vICAgICAgICAgICBtZXNzYWdlOiBgU3VjY2Vzc2Z1bGx5IGFkZGVkIFNCUkwgdmlhIFBJWCB0byB5b3VyIHdhbGxldC5gLFxuLy8gICAgICAgICB9LFxuLy8gICAgICAgfSk7XG4vLyAgICAgfVxuLy8gICB9LCA1MDAwKTtcbi8vIH07XG5cbi8vIGV4cG9ydCBjb25zdCBsaXN0ZW5CYWxhbmNlID0gKCkgPT4ge1xuLy8gICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4vLyAgICAgdXBkYXRlQmFsYW5jZSgpO1xuLy8gICB9LCAxMDAwMCk7XG4vLyB9O1xuXG5leHBvcnQgY29uc3QgZ2V0UnBjVXJsID0gKGNoYWluSWQ6IFN1cHBvcnRlZENoYWluSWQpOiBzdHJpbmcgPT4ge1xuICBzd2l0Y2ggKGNoYWluSWQpIHtcbiAgICBjYXNlIFN1cHBvcnRlZENoYWluSWQuQVJCSVRSVU1fT05FOlxuICAgIGNhc2UgU3VwcG9ydGVkQ2hhaW5JZC5GQU5UT006XG4gICAgY2FzZSBTdXBwb3J0ZWRDaGFpbklkLkdPRVJMSTpcbiAgICBjYXNlIFN1cHBvcnRlZENoYWluSWQuUE9MWUdPTjpcbiAgICBjYXNlIFN1cHBvcnRlZENoYWluSWQuUE9MWUdPTl9NVU1CQUk6XG4gICAgICByZXR1cm4gUlBDX1VSTFNbY2hhaW5JZF1bMF07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBGQUxMQkFDS19VUkxTW2NoYWluSWRdWzBdO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RXN0aW1hdGVkR2FzRmVlID0gYXN5bmMgKFxuICBjaGFpbklkOiBudW1iZXIsXG4gIHRva2VuSWQ6IG51bWJlcixcbiAgYW1vdW50OiBudW1iZXJcbikgPT4ge1xuICBjb25zdCBteUhlYWRlcnMgPSBuZXcgSGVhZGVycygpO1xuXG4gIG15SGVhZGVycy5hcHBlbmQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuXG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKFxuICAgIGAke3Byb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0JBQ0tFTkRfVVJMfS9lc3RpbWF0ZWQtZ2FzYCxcbiAgICB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgaGVhZGVyczogbXlIZWFkZXJzLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBuZXR3b3JrSWQ6IGNoYWluSWQsXG4gICAgICAgIHRva2VuOiB0b2tlbklkLFxuICAgICAgICBhbW91bnQ6IGFtb3VudCxcbiAgICAgIH0pLFxuICAgIH1cbiAgKTtcbiAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuLy8gZXhwb3J0IGNvbnN0IGRvQnJpZGdlID0gYXN5bmMgKFxuLy8gICB0b0FkZHJlc3M6IHN0cmluZyxcbi8vICAgYW1vdW50OiBzdHJpbmcsXG4vLyAgIGNoYWluSWQ6IG51bWJlclxuLy8gKSA9PiB7XG4vLyAgIGNvbnN0IGV0aGVyZXVtID0gKHdpbmRvdyBhcyBhbnkpLmV0aGVyZXVtO1xuLy8gICBjb25zdCBhY2NvdW50cyA9IGF3YWl0IGV0aGVyZXVtLnJlcXVlc3Qoe1xuLy8gICAgIG1ldGhvZDogXCJldGhfcmVxdWVzdEFjY291bnRzXCIsXG4vLyAgIH0pO1xuXG4vLyAgIGNvbnN0IGNvbnRyYWN0QWRkcmVzcyA9IHN0b3JlLmdldHRlcnMuZ2V0Q29udHJhY3RBZGRyZXNzO1xuLy8gICBjb25zdCBwcm92aWRlciA9IG5ldyBldGhlcnMucHJvdmlkZXJzLldlYjNQcm92aWRlcihldGhlcmV1bSk7XG4vLyAgIGNvbnN0IHdhbGxldEFkZHJlc3MgPSBhY2NvdW50c1swXTsgLy8gZmlyc3QgYWNjb3VudCBpbiBNZXRhTWFza1xuLy8gICBjb25zdCBzaWduZXIgPSBwcm92aWRlci5nZXRTaWduZXIod2FsbGV0QWRkcmVzcyk7XG4vLyAgIGNvbnN0IGNvbnRyYWN0ID0gbmV3IGV0aGVycy5Db250cmFjdChjb250cmFjdEFkZHJlc3MsIHNicmxBYmksIHNpZ25lcik7XG5cbi8vICAgY29uc3QgbnVtYmVyT2ZEZWNpbWFscyA9IDY7XG4vLyAgIGNvbnN0IG51bWJlck9mVG9rZW5zID0gZXRoZXJzLnV0aWxzLnBhcnNlVW5pdHMoYW1vdW50LCBudW1iZXJPZkRlY2ltYWxzKTtcblxuLy8gICBjb25zdCB0eCA9IGF3YWl0IGNvbnRyYWN0LmJ1cm5Ub0JyaWRnZShudW1iZXJPZlRva2VucywgdG9BZGRyZXNzLCBjaGFpbklkLCB7XG4vLyAgICAgZ2FzTGltaXQ6IDMwMDAwMDAsXG4vLyAgICAgZ2FzUHJpY2U6IGV0aGVycy51dGlscy5wYXJzZVVuaXRzKFwiNTBcIiwgXCJnd2VpXCIpLFxuLy8gICB9KTtcbi8vICAgY29uc29sZS5sb2codHgpO1xuLy8gfTtcbiJdLCJuYW1lcyI6WyJDb250cmFjdCIsImV0aGVycyIsInNicmxBYmkiLCJzdGFrZUNvbnRyYWN0QWJpIiwiU3VwcG9ydGVkQ2hhaW5JZCIsInN1cHBvcnRlZENoYWlucyIsIkZBTExCQUNLX1VSTFMiLCJSUENfVVJMUyIsIkluamVjdGVkQ29ubmVjdG9yIiwiZ2V0Q2hhaW5JbmZvIiwiU1RBS0VfQ09OVFJBQ1RfQUREUkVTUyIsIkluamVjdGVkQ29ubmVjdCIsInN1cHBvcnRlZENoYWluSWRzIiwiZm9ybWF0QWRkcmVzcyIsInN0ciIsImluaXRpYWxEaWdpdHMiLCJzdWJzdHJpbmciLCJtaWRkbGVEaWdpdHMiLCJsYXN0RGlnaXRzIiwibGVuZ3RoIiwic3dpdGNoTmV0d29yayIsImNoYWluSWQiLCJjaGFpbklkSW5IZXgiLCJ1dGlscyIsImhleFZhbHVlIiwid2luZG93IiwiZXRoZXJldW0iLCJyZXF1ZXN0IiwibWV0aG9kIiwicGFyYW1zIiwiZSIsImNvZGUiLCJjaGFpbkluZm8iLCJmaW5kIiwiY2hhaW4iLCJjaGFpbk5hbWUiLCJuYXRpdmVDdXJyZW5jeSIsIm5hbWUiLCJycGNVcmxzIiwiZ2V0UnBjVXJsIiwiZXJyb3IiLCJzdGFrZUFtb3VudCIsImFtb3VudCIsImFjY291bnRzIiwid2FsbGV0QWRkcmVzcyIsInByb3ZpZGVyIiwicHJvdmlkZXJzIiwiV2ViM1Byb3ZpZGVyIiwic2lnbmVyIiwiZ2V0U2lnbmVyIiwiY29udHJhY3QiLCJhcHByb3ZlU2JybCIsInJlc3VsdCIsInN0YWtlIiwiYWRkcmVzcyIsInN0YWJsZUJyaWRnZUNvbnRyYWN0QWRkcmVzcyIsImFwcHJvdmUiLCJjb25zb2xlIiwiZ2V0U0JSTEFtb3VudCIsImJhbGFuY2UiLCJiYWxhbmNlT2YiLCJiYWxhbmNlRm9ybWF0dGVkIiwiZm9ybWF0VW5pdHMiLCJBUkJJVFJVTV9PTkUiLCJGQU5UT00iLCJHT0VSTEkiLCJQT0xZR09OIiwiUE9MWUdPTl9NVU1CQUkiLCJnZXRFc3RpbWF0ZWRHYXNGZWUiLCJ0b2tlbklkIiwibXlIZWFkZXJzIiwiSGVhZGVycyIsImFwcGVuZCIsInJlcyIsImZldGNoIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0JBQ0tFTkRfVVJMIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwibmV0d29ya0lkIiwidG9rZW4iLCJkYXRhIiwianNvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./utils/index.ts\n"));

/***/ })

});